// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Conseil {
  id        String   @id @default(uuid())
  password  String   @unique
  creator   String
  school_name String
  limit_time DateTime
  createdAt DateTime @default(now())
  Question  Question[]
  history History[]
}

model Question {
  id        String   @id @default(uuid())
  title     String
  content   String
  author    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comments  Comment[]
  conseil   Conseil   @relation(fields: [conseilId], references: [id])
  conseilId String
  likes Like[]
  reports Report[]
}

model Comment {
  id          String @id @default(uuid())
  questionId  String
  content     String
  author      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  is_reviewed Boolean @default(false)
  question     Question @relation(fields: [questionId], references: [id])
  likes Like[]
  reports Report[]
}

model Like {
  id         String   @id @default(uuid())
  author_id  String
  question   Question? @relation(fields: [questionId], references: [id])
  questionId String?
  comment    Comment? @relation(fields: [commentId], references: [id])
  commentId  String?
}

model Report {
  id  String  @id @default(uuid())
  author_id String
  question   Question? @relation(fields: [questionId], references: [id])
  questionId String?
  comment    Comment? @relation(fields: [commentId], references: [id])
  commentId  String?
}

model History {
  id String @id @default(uuid())
  user_id String @unique
  conseil Conseil[] 
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}